public class Factura {

    private Long clienteCodigo;
    private String clienteNombre;
    private String clienteRuc;
    private Timestamp fechaVenta;
    private BigDecimal montoVenta;
    private EnumCondicionVenta condicionVenta;
    private BigDecimal montoIva;
    private Long numero;
    private List<FacturaDetalle> detalles;

    public Factura() {
    }

    public Factura(Long numero) {
        this.numero = numero;
    }

    public List<FacturaDetalle> getDetalles() {
        return detalles;
    }

    public void setDetalles(List<FacturaDetalle> detalles) {
        this.detalles = detalles;
    }

    public void setMontoVenta(BigDecimal montoVenta) {
        this.montoVenta = montoVenta;
    }

    public BigDecimal getMontoVenta() {
        return montoVenta;
    }

    public Long getNumero() {
        return numero;
    }

    public void calcularImporteproducto(Long numeroFactura) {
        Factura f = new Factura(numeroFactura);
        f.setDetalles(this.buildDetalles());
    }

    private List<FacturaDetalle> buildDetalles() {
        return LongStream.range(0, 5).boxed().map(l -> {
            BigDecimal precioUnitario = CalculadoraUtils.generaMontoAleatorio(1l, 100_000l);
            BigDecimal cantidad = CalculadoraUtils.generaMontoAleatorio(1l, 100l);

            FacturaDetalle detalle = new FacturaDetalle(precioUnitario, cantidad);

            Integer importeTotalDetalle = detalle.calcularImporteTotal();
            System.out.printf("Detalle numero: %s, importe total: %s%n", l + 1l, importeTotalDetalle);

            return detalle;
        }).collect(Collectors.toList());
    }

}

public class FacturaDetalle {

    private Long productoCodigo;
    private String productoNombre;
    private BigDecimal precioUnitario;
    private BigDecimal precioTotal;
    private BigDecimal ivaTotal;
    private BigDecimal cantidad;

    public FacturaDetalle() {
    }

    public FacturaDetalle(BigDecimal precioUnitario, BigDecimal cantidad) {
        this.precioUnitario = precioUnitario;
        this.cantidad = cantidad;
    }

    public Integer calcularImporteTotal() {
        return this.precioUnitario.multiply(this.cantidad).intValue();
    }

}

public class CalculadoraUtils {
    public static void imprimeSumaDeMontoVentaFacturaConNumeroFacturaMultiploDe7(
            BigDecimal sumaFacturaConNumeroFacturaMultiploDe7) {
        System.out.println("Suma de monto de venta de facturas con numero de factura multiplo de 7: "
                + sumaFacturaConNumeroFacturaMultiploDe7);
    }

    public static Boolean comparaMontoInferiorA5Millones(BigDecimal montoVenta) {
        return montoVenta.compareTo(new BigDecimal(5_000_000l)) < 0;
    }

    public static Boolean numeroFacturaEsMultiploDe7(Long numeroFactura) {
        return numeroFactura % 7 == 0;
    }

    public static BigDecimal generaMontoAleatorio(Long minimo, Long maximo) {
        Long range = maximo - minimo + 1;
        return new BigDecimal((long) (Math.random() * range) + minimo);
    }

    public static BigDecimal calculaPromedioVenta(BigDecimal sumaMontoVenta,
            Long cantidadTotalFacturas) {
        if (sumaMontoVenta == null || cantidadTotalFacturas == 0l)
            return BigDecimal.ZERO;

        return sumaMontoVenta.divide(new BigDecimal(cantidadTotalFacturas), 2, RoundingMode.HALF_UP);
    }

    public static String formatearBigDecimalGuarani(BigDecimal valor) {
        DecimalFormat df = new DecimalFormat("#,###");
        df.setGroupingSize(3);
        df.setGroupingUsed(true);
        return df.format(valor);
    }
}


public class PruebaJava01 {
    // 1- Ciclo que imprime del 1 al 100, y para cada numero genera un monto de
    // venta aleatorio entre 0 y 10 millones
    // 2- Cuenta cuantas facturas tienen monto inferior a 5 millones
    // 3- Suma el monto de las facturas cuyo numero de factura es multiplo de 7

    public static void main(String[] args) {

        final Tarea01Result resultado = new Tarea01Result();

        LongStream.range(1, 101).forEach(i -> {
            Factura f = new Factura(i);

            BigDecimal nuevoMontoVenta = CalculadoraUtils.generaMontoAleatorio(1l, 10_000_000l);
            f.setMontoVenta(nuevoMontoVenta);

            // 1- Aumenta contador cuando cumple con condicion de monto menor a 5 millones
            if (CalculadoraUtils.comparaMontoInferiorA5Millones(nuevoMontoVenta)) {
                resultado.incrementCantidadFacturasInferiorA5Millones();
            }

            // 2- Filtra las facturas con numero de factura multiplo de 7 y agrega el
            // contador y aumenta la suma
            if (i % 7 == 0)
                resultado.addToSumaTotalDelMontoDeFacturasConNumeroDeFacturaMultiploDe7(nuevoMontoVenta);

            System.out.println("Factura Nro: " + f.getNumero() + " - Monto Venta: " + nuevoMontoVenta);

            // 3- Suma el total de las facturas y cuenta la cantidad de las mismas
            resultado.addSumaTotal(nuevoMontoVenta);

        });

        System.out.println("-".repeat(64));

        System.out
                .println("1 - Cantidad de facturas con monto inferior a 5 millones: "
                        + resultado.getCantidadFacturasInferiora5Millones());

        System.out.println("2 - Suma total de monto de facturas con numero de factura multiplo de 7: " +
                resultado.getSumaTotalDelMontoDeFacturasConNumeroDeFacturaMultiploDe7());

        System.out.printf(
                "3 - La suma total de los montos de las facturas es de: %s, y el promedio de las mismas es: %s%n",
                resultado.getSumaTotalMontoVentas(), resultado.getPromedioMontoVentas());

        System.out.println("-".repeat(64));

        System.out.println("Fin de la tarea");

    }
}

public class PruebaJava02 {
    public static void main(String[] args) {
        Factura f = new Factura();
        f.calcularImporteproducto(1l);
    }
}


